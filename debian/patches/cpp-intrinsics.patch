Description: Add to i386 intrinsic headers extern "C" blocks for C++ case
Origin: http://gcc.gnu.org/ml/gcc-patches/2010-03/msg00033.html
Author: Kai Tietz <kai.tietz@onevision.com>
Last-Update: 2011-07-31

Index: gcc/gcc/config/i386/abmintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/abmintrin.h	2009-12-09 19:37:21.000000000 +0100
+++ gcc/gcc/config/i386/abmintrin.h	2010-03-01 18:17:12.895902500 +0100
@@ -32,6 +32,10 @@
 #ifndef _ABMINTRIN_H_INCLUDED
 #define _ABMINTRIN_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 __lzcnt16 (unsigned short __X)
 {
@@ -52,4 +56,8 @@ __lzcnt64 (unsigned long __X)
 }
 #endif
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _ABMINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/ammintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/ammintrin.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/ammintrin.h	2010-03-01 18:17:12.899902500 +0100
@@ -34,6 +34,10 @@
 /* We need definitions from the SSE3, SSE2 and SSE header files*/
 #include <pmmintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_stream_sd (double * __P, __m128d __Y)
 {
@@ -83,6 +87,10 @@ _mm_inserti_si64(__m128i __X, __m128i __
 				      (unsigned int)(I), (unsigned int)(L)))
 #endif
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __SSE4A__ */
 
 #endif /* _AMMINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/avxintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/avxintrin.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/avxintrin.h	2010-03-01 18:17:12.904902500 +0100
@@ -28,6 +28,10 @@
 # error "Never use <avxintrin.h> directly; include <immintrin.h> instead."
 #endif
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Internal data types for implementing the intrinsics.  */
 typedef double __v4df __attribute__ ((__vector_size__ (32)));
 typedef float __v8sf __attribute__ ((__vector_size__ (32)));
@@ -1424,3 +1428,8 @@ _mm256_castsi128_si256 (__m128i __A)
 {
   return (__m256i) __builtin_ia32_si256_si ((__v4si)__A);
 }
+
+#ifdef __cplusplus
+}
+#endif
+
Index: gcc/gcc/config/i386/cpuid.h
===================================================================
--- gcc.orig/gcc/config/i386/cpuid.h	2009-12-09 19:37:21.000000000 +0100
+++ gcc/gcc/config/i386/cpuid.h	2010-03-01 18:17:12.908902500 +0100
@@ -21,6 +21,10 @@
  * <http://www.gnu.org/licenses/>.
  */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* %ecx */
 #define bit_SSE3	(1 << 0)
 #define bit_PCLMUL	(1 << 1)
@@ -179,3 +183,8 @@ __get_cpuid (unsigned int __level,
   __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   return 1;
 }
+
+#ifdef __cplusplus
+}
+#endif
+
Index: gcc/gcc/config/i386/emmintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/emmintrin.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/emmintrin.h	2010-03-01 18:17:12.914902500 +0100
@@ -35,6 +35,10 @@
 /* We need definitions from the SSE header files*/
 #include <xmmintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* SSE2 */
 typedef double __v2df __attribute__ ((__vector_size__ (16)));
 typedef long long __v2di __attribute__ ((__vector_size__ (16)));
@@ -1508,6 +1512,10 @@ _mm_castsi128_pd(__m128i __A)
   return (__m128d) __A;
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __SSE2__  */
 
 #endif /* _EMMINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/fma4intrin.h
===================================================================
--- gcc.orig/gcc/config/i386/fma4intrin.h	2009-11-11 18:08:09.000000000 +0100
+++ gcc/gcc/config/i386/fma4intrin.h	2010-03-01 18:17:12.918902500 +0100
@@ -35,6 +35,10 @@
 /* We need definitions from the SSE4A, SSE3, SSE2 and SSE header files.  */
 #include <ammintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* 128b Floating point multiply/add type instructions.  */
 extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_macc_ps (__m128 __A, __m128 __B, __m128 __C)
@@ -231,6 +235,10 @@ _mm256_msubadd_pd (__m256d __A, __m256d 
   return (__m256d) __builtin_ia32_vfmsubaddpd256 ((__v4df)__A, (__v4df)__B, (__v4df)__C);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif
 
 #endif
Index: gcc/gcc/config/i386/gmm_malloc.h
===================================================================
--- gcc.orig/gcc/config/i386/gmm_malloc.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/gmm_malloc.h	2010-03-01 18:17:12.922902500 +0100
@@ -27,6 +27,10 @@
 #include <stdlib.h>
 #include <errno.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 static __inline__ void* 
 _mm_malloc (size_t size, size_t align)
 {
@@ -71,4 +75,8 @@ _mm_free (void * aligned_ptr)
     free (((void **) aligned_ptr) [-1]);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _MM_MALLOC_H_INCLUDED */
Index: gcc/gcc/config/i386/ia32intrin.h
===================================================================
--- gcc.orig/gcc/config/i386/ia32intrin.h	2009-11-06 11:12:44.000000000 +0100
+++ gcc/gcc/config/i386/ia32intrin.h	2010-03-01 18:17:12.926902500 +0100
@@ -25,6 +25,10 @@
 # error "Never use <ia32intrin.h> directly; include <x86intrin.h> instead."
 #endif
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* 32bit bsf */
 extern __inline int
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
@@ -230,3 +234,8 @@ __rorq (unsigned long long __X, int __C)
 #define _rotwr(a,b)		__rorw((a), (b))
 #define _rotl(a,b)		__rold((a), (b))
 #define _rotr(a,b)		__rord((a), (b))
+
+#ifdef __cplusplus
+}
+#endif
+
Index: gcc/gcc/config/i386/lwpintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/lwpintrin.h	2009-12-17 17:30:27.000000000 +0100
+++ gcc/gcc/config/i386/lwpintrin.h	2010-03-01 18:17:12.932902500 +0100
@@ -32,6 +32,10 @@
 # error "LWP instruction set not enabled"
 #else
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 __llwpcb (void *pcbAddress)
 {
@@ -95,6 +99,10 @@ __lwpins64 (unsigned long long data2, un
 #endif
 #endif
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __LWP__ */
 
 #endif /* _LWPINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/mm3dnow.h
===================================================================
--- gcc.orig/gcc/config/i386/mm3dnow.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/mm3dnow.h	2010-03-01 18:17:12.936902500 +0100
@@ -31,6 +31,10 @@
 
 #include <mmintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _m_femms (void)
 {
@@ -210,6 +214,11 @@ _m_pswapd (__m64 __A)
 }
 
 #endif /* __3dNOW_A__ */
+
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __3dNOW__ */
 
 #endif /* _MM3DNOW_H_INCLUDED */
Index: gcc/gcc/config/i386/mmintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/mmintrin.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/mmintrin.h	2010-03-01 18:17:12.940902500 +0100
@@ -31,6 +31,11 @@
 #ifndef __MMX__
 # error "MMX instruction set not enabled"
 #else
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* The Intel API is flexible enough that we must allow aliasing with other
    vector types, and their scalar components.  */
 typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));
@@ -917,5 +922,9 @@ _mm_set1_pi8 (char __b)
   return _mm_set_pi8 (__b, __b, __b, __b, __b, __b, __b, __b);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __MMX__ */
 #endif /* _MMINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/pmm_malloc.h
===================================================================
--- gcc.orig/gcc/config/i386/pmm_malloc.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/pmm_malloc.h	2010-03-01 18:17:12.945902500 +0100
@@ -34,6 +34,10 @@ extern int posix_memalign (void **, size
 extern "C" int posix_memalign (void **, size_t, size_t) throw ();
 #endif
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 static __inline void *
 _mm_malloc (size_t size, size_t alignment)
 {
@@ -54,4 +58,8 @@ _mm_free (void * ptr)
   free (ptr);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _MM_MALLOC_H_INCLUDED */
Index: gcc/gcc/config/i386/pmmintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/pmmintrin.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/pmmintrin.h	2010-03-01 18:17:12.949902500 +0100
@@ -35,6 +35,10 @@
 /* We need definitions from the SSE2 and SSE header files*/
 #include <emmintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Additional bits in the MXCSR.  */
 #define _MM_DENORMALS_ZERO_MASK		0x0040
 #define _MM_DENORMALS_ZERO_ON		0x0040
@@ -123,6 +127,10 @@ _mm_mwait (unsigned int __E, unsigned in
   __builtin_ia32_mwait (__E, __H);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __SSE3__ */
 
 #endif /* _PMMINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/popcntintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/popcntintrin.h	2009-12-09 19:37:21.000000000 +0100
+++ gcc/gcc/config/i386/popcntintrin.h	2010-03-01 18:17:12.953902500 +0100
@@ -28,6 +28,10 @@
 #ifndef _POPCNTINTRIN_H_INCLUDED
 #define _POPCNTINTRIN_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Calculate a number of bits set to 1.  */
 extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_popcnt_u32 (unsigned int __X)
@@ -43,4 +47,8 @@ _mm_popcnt_u64 (unsigned long long __X)
 }
 #endif
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _POPCNTINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/smmintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/smmintrin.h	2009-12-09 19:37:21.000000000 +0100
+++ gcc/gcc/config/i386/smmintrin.h	2010-03-01 18:17:12.957902500 +0100
@@ -36,6 +36,10 @@
    files.  */
 #include <tmmintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Rounding mode macros. */
 #define _MM_FROUND_TO_NEAREST_INT	0x00
 #define _MM_FROUND_TO_NEG_INF		0x01
@@ -826,6 +830,10 @@ _mm_crc32_u64 (unsigned long long __C, u
 
 #endif /* __SSE4_2__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __SSE4_1__ */
 
 #endif /* _SMMINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/tmmintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/tmmintrin.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/tmmintrin.h	2010-03-01 18:17:12.963902500 +0100
@@ -34,6 +34,10 @@
 /* We need definitions from the SSE3, SSE2 and SSE header files*/
 #include <pmmintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_hadd_epi16 (__m128i __X, __m128i __Y)
 {
@@ -239,6 +243,10 @@ _mm_abs_pi32 (__m64 __X)
   return (__m64) __builtin_ia32_pabsd ((__v2si)__X);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __SSSE3__ */
 
 #endif /* _TMMINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/wmmintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/wmmintrin.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/wmmintrin.h	2010-03-01 18:17:12.967902500 +0100
@@ -34,6 +34,10 @@
 # error "AES/PCLMUL instructions not enabled"
 #else
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* AES */
 
 #ifdef __AES__
@@ -115,6 +119,10 @@ _mm_clmulepi64_si128 (__m128i __X, __m12
 #endif
 #endif  /* __PCLMUL__  */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __AES__/__PCLMUL__ */
 
 #endif /* _WMMINTRIN_H_INCLUDED */
Index: gcc/gcc/config/i386/xmmintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/xmmintrin.h	2009-04-12 20:40:03.000000000 +0200
+++ gcc/gcc/config/i386/xmmintrin.h	2010-03-01 18:17:12.972902500 +0100
@@ -38,6 +38,10 @@
 /* Get _mm_malloc () and _mm_free ().  */
 #include <mm_malloc.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* The Intel API is flexible enough that we must allow aliasing with other
    vector types, and their scalar components.  */
 typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));
@@ -1242,6 +1246,10 @@ do {									\
   (row3) = __builtin_ia32_movhlps (__t3, __t2);				\
 } while (0)
 
+#ifdef __cplusplus
+}
+#endif
+
 /* For backward source compatibility.  */
 #ifdef __SSE2__
 # include <emmintrin.h>
Index: gcc/gcc/config/i386/xopintrin.h
===================================================================
--- gcc.orig/gcc/config/i386/xopintrin.h	2010-02-26 18:40:15.000000000 +0100
+++ gcc/gcc/config/i386/xopintrin.h	2010-03-01 18:17:12.976902500 +0100
@@ -34,6 +34,10 @@
 
 #include <fma4intrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Integer multiply/add intructions. */
 extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)
@@ -830,6 +834,10 @@ _mm256_permute2_ps (__m256 __X, __m256 _
  					  (int)(I)))
 #endif /* __OPTIMIZE__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* __XOP__ */
 
 #endif /* _XOPMMINTRIN_H_INCLUDED */
