commit 339e22fd827bcda7c984b367302ad18a80d5ffbc
Author: redi <redi@138bc75d-0d04-0410-961f-82ee72b054a4>
Date:   Mon Jun 18 18:59:44 2018 +0000

    LWG 2989 hide path iostream operators from normal lookup
    
    By only defining these operators as friends (with no namespace-scope
    declaration) they can only be found by ADL and do not participate in
    overload resolution for arguments of types other than path.
    
            LWG 2989 hide path iostream operators from normal lookup
            * include/bits/fs_path.h (operator<<, operator>>): Define inline as
            friends.
            * testsuite/27_io/filesystem/path/io/dr2989.cc: New.
    
    git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@261711 138bc75d-0d04-0410-961f-82ee72b054a4

Index: gcc-mingw-w64/src/libstdc++-v3/include/bits/fs_path.h
===================================================================
--- gcc-mingw-w64.orig/src/libstdc++-v3/include/bits/fs_path.h	2019-02-04 14:26:17.884899203 +0100
+++ gcc-mingw-w64/src/libstdc++-v3/include/bits/fs_path.h	2019-02-04 14:26:52.917908635 +0100
@@ -364,6 +364,26 @@
     iterator begin() const;
     iterator end() const;
 
+    /// Write a path to a stream
+    template<typename _CharT, typename _Traits>
+      friend std::basic_ostream<_CharT, _Traits>&
+      operator<<(std::basic_ostream<_CharT, _Traits>& __os, const path& __p)
+      {
+	__os << std::quoted(__p.string<_CharT, _Traits>());
+	return __os;
+      }
+
+    /// Read a path from a stream
+    template<typename _CharT, typename _Traits>
+      friend std::basic_istream<_CharT, _Traits>&
+      operator>>(std::basic_istream<_CharT, _Traits>& __is, path& __p)
+      {
+	std::basic_string<_CharT, _Traits> __tmp;
+	if (__is >> std::quoted(__tmp))
+	  __p = std::move(__tmp);
+	return __is;
+      }
+
     // Create a basic_string by reading until a null character.
     template<typename _InputIterator,
 	     typename _Traits = std::iterator_traits<_InputIterator>,
@@ -506,26 +526,6 @@
     return __result;
   }
 
-  /// Write a path to a stream
-  template<typename _CharT, typename _Traits>
-    basic_ostream<_CharT, _Traits>&
-    operator<<(basic_ostream<_CharT, _Traits>& __os, const path& __p)
-    {
-      __os << std::quoted(__p.string<_CharT, _Traits>());
-      return __os;
-    }
-
-  /// Read a path from a stream
-  template<typename _CharT, typename _Traits>
-    basic_istream<_CharT, _Traits>&
-    operator>>(basic_istream<_CharT, _Traits>& __is, path& __p)
-    {
-      basic_string<_CharT, _Traits> __tmp;
-      if (__is >> std::quoted(__tmp))
-	__p = std::move(__tmp);
-      return __is;
-    }
-
   template<typename _InputIterator>
     inline auto
     u8path(_InputIterator __first, _InputIterator __last)
Index: gcc-mingw-w64/src/libstdc++-v3/testsuite/27_io/filesystem/path/io/dr2989.cc
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gcc-mingw-w64/src/libstdc++-v3/testsuite/27_io/filesystem/path/io/dr2989.cc	2019-02-04 14:26:17.880899088 +0100
@@ -0,0 +1,35 @@
+// Copyright (C) 2018 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License along
+// with this library; see the file COPYING3.  If not see
+// <http://www.gnu.org/licenses/>.
+
+// { dg-options "-std=gnu++17" }
+// { dg-do compile { target c++17 } }
+
+#include <iostream>
+#include <filesystem>
+
+using namespace std::filesystem;
+
+struct P {
+  operator path&();
+};
+
+void foo(std::iostream& s) {
+  P p;
+  s << p; // { dg-error "no match" }
+  s >> p; // { dg-error "no match" }
+}
+// { dg-prune-output "no type .* std::enable_if" }
